# Generated by Django 2.0.7 on 2018-07-02 18:47

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('national_code', models.CharField(blank=True, max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('phone_number', models.TextField(max_length=15)),
                ('email', models.EmailField(max_length=254)),
                ('score', models.FloatField(default=0)),
                ('address', models.TextField(max_length=500)),
                ('description', models.TextField(default='test', max_length=600)),
            ],
        ),
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='pics',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, null=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('Business', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='business', to='zanbil.Business')),
            ],
        ),
        migrations.CreateModel(
            name='Reserves',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.TextField()),
                ('date', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(default='test', max_length=600)),
                ('rating', models.FloatField()),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='zanbil.Business')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Sans',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('start_time', models.FloatField()),
                ('end_time', models.FloatField()),
                ('weekday', models.PositiveIntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30)),
                ('fee', models.FloatField()),
                ('rating', models.FloatField()),
                ('description', models.TextField(default='test', max_length=600)),
                ('cancellation_fee', models.FloatField()),
                ('cancelation_time', models.FloatField()),
                ('capacity', models.IntegerField()),
                ('off', models.FloatField()),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='zanbil.Business')),
            ],
        ),
        migrations.CreateModel(
            name='TimeTable',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('sans_count', models.IntegerField()),
                ('work_days', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True), blank=True, size=None)),
                ('rest_times', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True), blank=True, size=None)),
            ],
        ),
        migrations.AddField(
            model_name='services',
            name='timetable',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='zanbil.TimeTable'),
        ),
        migrations.AddField(
            model_name='sans',
            name='time_table',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='zanbil.TimeTable'),
        ),
        migrations.AddField(
            model_name='reserves',
            name='sans',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='zanbil.Sans'),
        ),
        migrations.AddField(
            model_name='reserves',
            name='service',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='zanbil.Services'),
        ),
        migrations.AddField(
            model_name='reserves',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='pics',
            name='Service',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='service', to='zanbil.Services'),
        ),
        migrations.AddField(
            model_name='business',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='zanbil.Categories'),
        ),
        migrations.AddField(
            model_name='business',
            name='owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
    ]
